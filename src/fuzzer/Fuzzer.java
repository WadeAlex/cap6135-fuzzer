package fuzzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.ProcessBuilder;
import java.util.Calendar;
import java.util.Random;
import java.util.UUID;

import javax.imageio.stream.FileImageInputStream;

/**
 * This is the base class from which all fuzzers should inherit.
 */
public abstract class Fuzzer {
	/**
	 * Constant corresponding to SEGV exit code.
	 */
	private final int SEGV = 11;

	/**
	 * Name of target application executable.
	 */
	private String targetExecutable;

	/**
	 * BufferedWriter used to log seeds that create output that causes a SEGV.
	 */
	protected BufferedWriter logWriter;
	
	/**
	 * Random number generator used when generating random input.
	 */
	protected Random randomNumberGenerator;

	/**
	 * Image stream for the source image.
	 */
	protected FileImageInputStream sourceImage;

	/**
	 * Generate a target file with the fuzzer.
	 * 
	 * @param outputFile
	 *            output file
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	protected abstract void writeToOutputFile(File outputFile) throws FileNotFoundException, IOException;

	/**
	 * Write the fuzzer's execution parameters to the log file.
	 * @throws IOException 
	 */
	protected abstract void logExecutionParameters() throws IOException;

	/**
	 * Generate a random filename. UUID based filenames are used to prevent
	 * access violations in the event that there is a problem deleting a file
	 * after execution.
	 * 
	 * @param extension
	 *            extension of the file (without the preceding '.')
	 * @return randomly generated filename.
	 */
	protected final String generateRandomFilename(String extension) {
		UUID fileUuid = UUID.randomUUID();
		return fileUuid + "." + extension;
	}

	/**
	 * Execute the target application repeatedly with a new input generated by
	 * the fuzzer each time. Log any seeds that cause a SEGV.
	 * 
	 * @throws IOException
	 */
	protected final void execute() throws IOException {
		logExecutionParameters();
		while (true) {
			// Seed random number generator.
			Long seed = Calendar.getInstance().getTimeInMillis();
			randomNumberGenerator = new Random(seed);

			// Create the output file.
			File testFile = new File(generateRandomFilename("jpg"));
			writeToOutputFile(testFile);
			
			// Run the process.
			ProcessBuilder targetProcessBuilder = new ProcessBuilder(
					this.targetExecutable, testFile.getPath());
			Process targetProcess = targetProcessBuilder.start();
			
			// Log if we got a SEGV.
			if (targetProcess.exitValue() == SEGV) {
				logWriter.write(seed.toString());
				logWriter.newLine();
			}

			// Delete the test file.
			testFile.delete();
		}
	}

	/**
	 * Construct a new fuzzer object.
	 * 
	 * @param executable
	 *            executable for target application
	 * @param inputImageFilename
	 *            name of input file from which fuzzer outputs are generated.
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	public Fuzzer(String executable, String inputImageFilename)
			throws FileNotFoundException, IOException {
		// Create output stream for writing seeds that cause a SEGV.
		FileWriter fstream = new FileWriter("log");
		this.logWriter = new BufferedWriter(fstream);

		// Load the input image.
		File inputImage = new File(inputImageFilename);
		this.sourceImage = new FileImageInputStream(inputImage);
	}
}
