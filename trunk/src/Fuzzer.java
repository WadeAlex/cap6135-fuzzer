

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Random;

import javax.imageio.stream.FileImageInputStream;

/**
 * This is the base class from which all fuzzers should inherit.
 */
public abstract class Fuzzer {
	/**
	 * Constant corresponding to SEGV exit code.
	 */
	private final int SEGV = 139;

	/**
	 * Name of target application executable.
	 */
	private String targetExecutable;
	
	/**
	 * Name of input file.
	 */
	private String inputImageFilename;
	
	/**
	 * Name of output file
	 */
	private String outputImageFilename;
	
	/**
	 * Random number generator used when generating random input.
	 */
	protected Random randomNumberGenerator;

	/**
	 * Image stream for the source image.
	 */
	protected FileImageInputStream sourceImage;

	private boolean replayMode = false;
	private long replaySeed = 0;
	
	/**
	 * Generate a target file with the fuzzer.
	 * 
	 * @param outputFile
	 *            output file
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	protected abstract void writeToOutputFile(File outputFile) throws FileNotFoundException, IOException;

	
	/**
	 * Parse the commands input to the program.
	 * @param args
	 */
	protected void parseCmds(String[] args) {
		if(args.length < 2) {
			System.out.println("At least an input program, and input file are needed.");
		}
		for(int i=0; i<args.length; i++) {
			String s = args[i];
			if(s.charAt(0) == '-') {
				if(s.equals("--fuzz-file")) {
					inputImageFilename = args[++i];
				} else if (s.equals("--replay")) {
					replayMode = true;
					replaySeed = Long.parseLong(args[++i].trim(), 30);
				}
			} else {
				targetExecutable = args[i];
				outputImageFilename = args[++i];
				break;
			}
		}
	}

	/**
	 * Execute the target application repeatedly with a new input generated by
	 * the fuzzer each time. Log any seeds that cause a SEGV.
	 * 
	 * @throws IOException
	 */
	protected final void execute() throws IOException {
		char[] buffer = new char[1024];
		while (true) {
			// Seed random number generator.
			Long seed = 0L;
			if(replayMode) {
				seed = replaySeed;
				randomNumberGenerator = new Random(replaySeed);
			} else {
				if(randomNumberGenerator == null)
					seed = System.nanoTime();
				else
					seed = (randomNumberGenerator.nextInt(10) >= 5)? randomNumberGenerator.nextLong() : System.nanoTime();
				randomNumberGenerator = new Random(seed);
			}

			// Create the output file.
			File testFile = new File(outputImageFilename);
			writeToOutputFile(testFile);
			
			// Run the process.
			ProcessBuilder targetProcessBuilder = new ProcessBuilder(
					"./" + this.targetExecutable, testFile.getPath());
			if(replayMode) {
				for (String str:targetProcessBuilder.command()) {
					System.out.print(str + " ");
				}
				System.out.println();
				return;
			}
			
			Process targetProcess = targetProcessBuilder.start();
			
			String s = "";
			try {
				BufferedReader err = new BufferedReader(new InputStreamReader(targetProcess.getErrorStream()));
				BufferedReader in = new BufferedReader(new InputStreamReader(targetProcess.getInputStream()));
				while (in.read(buffer) != -1)
					;
				s = err.readLine();
				in.close();
				err.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			try {
				targetProcess.waitFor();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			// Log if we got a SEGV.
			if (targetProcess.exitValue() == SEGV && s.indexOf("BUG") != -1) {
				System.out.println(Long.toString(seed, 30));
			} else {
				// Delete the test file.
				testFile.delete();
			}
		}
	}

	/**
	 * Construct a new fuzzer object.
	 * 
	 * @param executable
	 *            executable for target application
	 * @param inputImageFilename
	 *            name of input file from which fuzzer outputs are generated.
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	public Fuzzer(String[] args)
			throws FileNotFoundException, IOException {
		parseCmds(args);

		// Load the input image.
		File inputImage = new File(inputImageFilename);
		this.sourceImage = new FileImageInputStream(inputImage);
	}
}
